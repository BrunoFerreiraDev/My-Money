{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bruno\\\\Desktop\\\\my-money\\\\src\\\\hooks\\\\useTransactions.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionContext = /*#__PURE__*/createContext({});\nexport function TransactionsProvider({\n  children\n}) {\n  _s();\n\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    api.get('transactions') //@ts-ignore\n    .then(response => setTransactions(response.data.transactions));\n  }, []);\n\n  async function createTransaction(transactionInput) {\n    const response = await api.post('/transactions', { ...transactionInput,\n      createdAt: new Date()\n    }); //@ts-ignore\n\n    const {\n      transaction\n    } = response.data;\n    setTransactions([...transactions, transaction]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      transactions,\n      createTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TransactionsProvider, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n\n_c = TransactionsProvider;\nexport function useTransactions() {\n  _s2();\n\n  const context = useContext(TransactionContext);\n  return context;\n}\n\n_s2(useTransactions, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"sources":["C:/Users/bruno/Desktop/my-money/src/hooks/useTransactions.tsx"],"names":["createContext","useContext","useEffect","useState","api","TransactionContext","TransactionsProvider","children","transactions","setTransactions","get","then","response","data","createTransaction","transactionInput","post","createdAt","Date","transaction","useTransactions","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,GAAT,QAAoB,iBAApB;;AAsBA,MAAMC,kBAAkB,gBAAGL,aAAa,CACpC,EADoC,CAAxC;AAIA,OAAO,SAASM,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAAsE;AAAA;;AACzE,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAgB,EAAhB,CAAhD;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,GAAG,CAACM,GAAJ,CAAQ,cAAR,EACI;AADJ,KAEKC,IAFL,CAEWC,QAAD,IAAcH,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CAFvC;AAIH,GALQ,EAKN,EALM,CAAT;;AAOA,iBAAeM,iBAAf,CAAiCC,gBAAjC,EAAqE;AACjE,UAAMH,QAAQ,GAAG,MAAMR,GAAG,CAACY,IAAJ,CAAS,eAAT,EAA0B,EAC7C,GAAGD,gBAD0C;AAE7CE,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AAFkC,KAA1B,CAAvB,CADiE,CAKjE;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAkBP,QAAQ,CAACC,IAAjC;AAEAJ,IAAAA,eAAe,CAAC,CACZ,GAAGD,YADS,EAEZW,WAFY,CAAD,CAAf;AAIH;;AAED,sBACI,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAAEX,MAAAA,YAAF;AAAgBM,MAAAA;AAAhB,KAApC;AAAA,cACKP;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA5BeD,oB;;KAAAA,oB;AA8BhB,OAAO,SAASc,eAAT,GAA2B;AAAA;;AAC9B,QAAMC,OAAO,GAAGpB,UAAU,CAACI,kBAAD,CAA1B;AAEA,SAAOgB,OAAP;AACH;;IAJeD,e","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from 'react'\r\nimport { api } from '../services/api';\r\n\r\ninterface Transaction {\r\n    id: number;\r\n    title: string;\r\n    amount: number;\r\n    type: string;\r\n    category: string;\r\n    createdAt: string;\r\n}\r\n\r\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>//pega os campos do Transaction menos id e createdAt\r\n\r\ninterface TransactionProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\ninterface TransactionContextData {\r\n    transactions: Transaction[];\r\n    createTransaction: (createTransaction: TransactionInput) => Promise<void>;\r\n}\r\n\r\nconst TransactionContext = createContext<TransactionContextData>(\r\n    {} as TransactionContextData\r\n);\r\n\r\nexport function TransactionsProvider({ children }: TransactionProviderProps) {\r\n    const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n    useEffect(() => {\r\n        api.get('transactions')\r\n            //@ts-ignore\r\n            .then((response) => setTransactions(response.data.transactions))\r\n\r\n    }, []);\r\n\r\n    async function createTransaction(transactionInput: TransactionInput) {\r\n        const response = await api.post('/transactions', {\r\n            ...transactionInput,\r\n            createdAt: new Date()\r\n        })\r\n        //@ts-ignore\r\n        const { transaction } = response.data\r\n\r\n        setTransactions([\r\n            ...transactions,\r\n            transaction\r\n        ])\r\n    }\r\n\r\n    return (\r\n        <TransactionContext.Provider value={{ transactions, createTransaction }} >\r\n            {children}\r\n        </TransactionContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useTransactions() {\r\n    const context = useContext(TransactionContext)\r\n\r\n    return context;\r\n}"]},"metadata":{},"sourceType":"module"}